#!/bin/bash
TOPO_NAME=testacross
NS=across-tc32

yq() {
  docker run --rm -i -v "${PWD}":/workdir mikefarah/yq "$@"
}

PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep rg | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1001\", \"namespace\": \"across-tc32\", \"interface\": \"net1001\"},{\"name\": \"net1002\", \"namespace\": \"across-tc32\", \"interface\": \"net1002\"},{\"name\": \"net1005\", \"namespace\": \"across-tc32\", \"interface\": \"net1005\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep rg | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep r2 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1003\", \"namespace\": \"across-tc32\", \"interface\": \"net1003\"},{\"name\": \"net1004\", \"namespace\": \"across-tc32\", \"interface\": \"net1004\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep r2 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep ru | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1008\", \"namespace\": \"across-tc32\", \"interface\": \"net1008\"},{\"name\": \"net1004\", \"namespace\": \"across-tc32\", \"interface\": \"net1004\"},{\"name\": \"net1007\", \"namespace\": \"across-tc32\", \"interface\": \"net1007\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep ru | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep hupf-h1 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net2002\", \"namespace\": \"across-tc32\", \"interface\": \"net2002\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep hupf-h1 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep rgnb | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1001\", \"namespace\": \"across-tc32\", \"interface\": \"net1001\"},{\"name\": \"net2001\", \"namespace\": \"across-tc32\", \"interface\": \"net2001\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep rgnb | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep r1 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1002\", \"namespace\": \"across-tc32\", \"interface\": \"net1002\"},{\"name\": \"net1003\", \"namespace\": \"across-tc32\", \"interface\": \"net1003\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep r1 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep r3 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1005\", \"namespace\": \"across-tc32\", \"interface\": \"net1005\"},{\"name\": \"net1006\", \"namespace\": \"across-tc32\", \"interface\": \"net1006\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep r3 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep r4 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1006\", \"namespace\": \"across-tc32\", \"interface\": \"net1006\"},{\"name\": \"net1007\", \"namespace\": \"across-tc32\", \"interface\": \"net1007\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep r4 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep rupf | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net1008\", \"namespace\": \"across-tc32\", \"interface\": \"net1008\"},{\"name\": \"net2002\", \"namespace\": \"across-tc32\", \"interface\": \"net2002\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep rupf | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep hgnb-h1 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net2001\", \"namespace\": \"across-tc32\", \"interface\": \"net2001\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep hgnb-h1 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep hgnb-h2 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net2001\", \"namespace\": \"across-tc32\", \"interface\": \"net2001\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep hgnb-h2 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get deployment $(kubectl -n $NS get deployments | grep hgnb-h3 | awk '{print $1}') -n $NS -o yaml | yq '.spec.template.metadata.annotations."k8s.v1.cni.cncf.io/networks" = "[{\"name\": \"net2001\", \"namespace\": \"across-tc32\", \"interface\": \"net2001\"}]"' -); kubectl patch deployment $(kubectl -n $NS get deployments | grep hgnb-h3 | awk '{print $1}') -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rgnb |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1001", "rgnb:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rgnb |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2001", "rgnb:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rg |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1001", "rg:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rg |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1002", "rg:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rg |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1005", "rg:eth3"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r1 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1002", "r1:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r1 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1003", "r1:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r2 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1003", "r2:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r2 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1004", "r2:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r3 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1005", "r3:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r3 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1006", "r3:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r4 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1006", "r4:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.r4 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1007", "r4:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.ru |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1008", "ru:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.ru |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1004", "ru:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.ru |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1007", "ru:eth3"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rupf |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net1008", "rupf:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.rupf |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2002", "rupf:eth2"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.hgnb-h1 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2001", "hgnb-h1:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.hgnb-h2 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2001", "hgnb-h2:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.hgnb-h3 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2001", "hgnb-h3:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
PATCH=$(kubectl get cm testacross -n $NS -o yaml | yq '.data.hupf-h1 |= (. | fromjson | .topology.links += [{"endpoints": ["macvlan:net2002", "hupf-h1:eth1"]}] | tojson)'); kubectl patch cm testacross -n $NS -o yaml --patch "$PATCH"
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep rgnb | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep rg | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep r1 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep r2 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep r3 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep r4 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep ru | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep rupf | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep hgnb-h1 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep hgnb-h2 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep hgnb-h3 | awk '{print $1}') -n $NS
kubectl rollout restart deployment $(kubectl -n $NS get deployments | grep hupf-h1 | awk '{print $1}') -n $NS
